{"version":3,"sources":["logo.svg","Editor/utils.js","Editor/index.js","App.js","index.js","registerServiceWorker.js"],"names":["postData","a","url","data","fetch","method","headers","redirect","referrerPolicy","body","JSON","stringify","response","json","saveCode","cloudBuildService","accountId","componentId","sourceCode","console","log","build","list","then","res","defaultOptions","acceptSuggestionOnCommitCharacter","acceptSuggestionOnEnter","accessibilitySupport","autoIndent","automaticLayout","codeLens","colorDecorators","contextmenu","cursorBlinking","cursorSmoothCaretAnimation","cursorStyle","disableLayerHinting","disableMonospaceOptimizations","dragAndDrop","fixedOverflowWidgets","folding","foldingStrategy","fontLigatures","formatOnPaste","formatOnType","hideCursorInOverviewRuler","highlightActiveIndentGuide","links","mouseWheelZoom","multiCursorMergeOverlapping","multiCursorModifier","overviewRulerBorder","overviewRulerLanes","quickSuggestions","quickSuggestionsDelay","readOnly","renderControlCharacters","renderFinalNewline","renderIndentGuides","renderLineHighlight","renderWhitespace","revealHorizontalRightPadding","roundedSelection","rulers","scrollBeyondLastColumn","scrollBeyondLastLine","selectOnLineNumbers","selectionClipboard","selectionHighlight","showFoldingControls","smoothScrolling","suggestOnTriggerCharacters","wordBasedSuggestions","wordSeparators","wordWrap","wordWrapBreakAfterCharacters","wordWrapBreakBeforeCharacters","wordWrapBreakObtrusiveCharacters","wordWrapColumn","wordWrapMinified","wrappingIndent","search","URLSearchParams","window","location","componentIdFromUrl","get","sourceFile","CodeEditor","useState","setSourceCode","setComponentId","componentList","useQuery","saveMutation","useMutation","buildMutation","useEffect","fileUrl","find","c","sourceUrl","text","code","error","className","map","component","href","for","id","type","placeholder","value","onChange","e","target","onClick","mutate","disabled","height","defaultLanguage","defaultValue","queryClient","QueryClient","App","QueryClientProvider","client","ReactDOM","render","document","getElementById","navigator","addEventListener","swUrl","process","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch"],"mappings":"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","file":"static/js/main.124524cc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","// Example POST method implementation:\nasync function postData(url = \"\", data = {}) {\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n    headers: {\n      \"Content-Type\": \"application/json\",\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    redirect: \"follow\", // manual, *follow, error\n    referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n  });\n  return response.json(); // parses JSON response into native JavaScript objects\n}\nexport const saveCode = async (\n  cloudBuildService,\n  accountId,\n  componentId,\n  sourceCode\n) => {\n  console.log(\n    \"saveCode\",\n    cloudBuildService,\n    accountId,\n    componentId,\n    sourceCode\n  );\n  return postData(`${cloudBuildService}/save`, {\n    accountId,\n    componentId,\n    sourceCode,\n  });\n};\n\nexport const build = async (cloudBuildService, accountId, componentId) => {\n  return postData(`${cloudBuildService}/build`, {\n    accountId,\n    componentId,\n  });\n};\n\nexport const list = async (cloudBuildService, accountId) => {\n  return fetch(`${cloudBuildService}/list?accountId=${accountId}`).then((res) =>\n    res.json()\n  );\n};\n","import Editor from \"@monaco-editor/react\";\nimport { useEffect, useState } from \"react\";\nimport { useMutation, useQuery } from \"react-query\";\nimport { build, list, saveCode } from \"./utils\";\n\nconst defaultOptions = {\n  acceptSuggestionOnCommitCharacter: true,\n  acceptSuggestionOnEnter: \"on\",\n  accessibilitySupport: \"auto\",\n  autoIndent: false,\n  automaticLayout: true,\n  codeLens: true,\n  colorDecorators: true,\n  contextmenu: true,\n  cursorBlinking: \"blink\",\n  cursorSmoothCaretAnimation: false,\n  cursorStyle: \"line\",\n  disableLayerHinting: false,\n  disableMonospaceOptimizations: false,\n  dragAndDrop: false,\n  fixedOverflowWidgets: false,\n  folding: true,\n  foldingStrategy: \"auto\",\n  fontLigatures: false,\n  formatOnPaste: false,\n  formatOnType: false,\n  hideCursorInOverviewRuler: false,\n  highlightActiveIndentGuide: true,\n  links: true,\n  mouseWheelZoom: false,\n  multiCursorMergeOverlapping: true,\n  multiCursorModifier: \"alt\",\n  overviewRulerBorder: true,\n  overviewRulerLanes: 2,\n  quickSuggestions: true,\n  quickSuggestionsDelay: 100,\n  readOnly: false,\n  renderControlCharacters: false,\n  renderFinalNewline: true,\n  renderIndentGuides: true,\n  renderLineHighlight: \"all\",\n  renderWhitespace: \"none\",\n  revealHorizontalRightPadding: 30,\n  roundedSelection: true,\n  rulers: [],\n  scrollBeyondLastColumn: 5,\n  scrollBeyondLastLine: true,\n  selectOnLineNumbers: true,\n  selectionClipboard: true,\n  selectionHighlight: true,\n  showFoldingControls: \"mouseover\",\n  smoothScrolling: false,\n  suggestOnTriggerCharacters: true,\n  wordBasedSuggestions: true,\n  wordSeparators: \"~!@#$%^&*()-=+[{]}|;:'\\\",.<>/?\",\n  wordWrap: \"off\",\n  wordWrapBreakAfterCharacters: \"\\t})]?|&,;\",\n  wordWrapBreakBeforeCharacters: \"{([+\",\n  wordWrapBreakObtrusiveCharacters: \".\",\n  wordWrapColumn: 80,\n  wordWrapMinified: true,\n  wrappingIndent: \"none\",\n};\nconst search = new URLSearchParams(window.location.search);\nconst componentIdFromUrl = search?.get(\"componentId\");\nconst accountId = search?.get(\"accountId\");\nconst sourceFile = search?.get(\"sourceFile\");\nconst cloudBuildService = search?.get(\"cloudBuildService\");\n\nexport const CodeEditor = () => {\n  const [sourceCode, setSourceCode] = useState(\"\");\n  const [componentId, setComponentId] = useState(componentIdFromUrl);\n\n  // Queries\n  const { data: componentList } = useQuery(\"componentList\", () => {\n    return list(cloudBuildService, accountId);\n  });\n  //   // Mutations\n  const saveMutation = useMutation(async () => {\n    return saveCode(cloudBuildService, accountId, componentId, sourceCode);\n  });\n  const buildMutation = useMutation(async () => {\n    return build(cloudBuildService, accountId, componentId);\n  });\n\n  console.log(saveMutation);\n  useEffect(async () => {\n    try {\n      const fileUrl =\n        sourceFile ||\n        componentList?.find((c) => c.componentId === componentId).sourceUrl;\n      console.log({ componentList, fileUrl });\n      const code = await fetch(fileUrl).then((response) => response.text());\n      setSourceCode(code);\n    } catch (e) {\n      console.error(e);\n    }\n  }, [componentList]);\n\n  return (\n    <>\n      <div className=\"flex p-4 justify-between items-center\">\n        <div className=\"text-left\">\n          <h2 className=\"text-lg\">{\"⚒️ 🧰 ⚒️ Lambda componet editor\"}</h2>\n          <p className=\"text-sm\">\n            Code react component online in browser from anywhere, build and\n            store on cloud and consume in your storefront.\n          </p>\n          <p>\n            All Components:{\" \"}\n            {componentList?.map((component) => {\n              return (\n                <>\n                  <a\n                    className=\"text-blue-700 font-bold\"\n                    href={`?accountId=${accountId}&cloudBuildService=${cloudBuildService}&componentId=${component.componentId}`}\n                  >\n                    {component.componentId}\n                  </a>\n                </>\n              );\n            })}\n          </p>\n          <div className=\"\">\n            <label\n              className=\"block text-gray-700 text-sm mb-2\"\n              for=\"componentId\"\n            >\n              Unique Component ID\n            </label>\n            <input\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              id=\"componentId\"\n              type=\"text\"\n              placeholder=\"\"\n              value={componentId}\n              onChange={(e) => {\n                setComponentId(e.target.value);\n              }}\n            />\n          </div>\n        </div>\n\n        <div>\n          <button\n            className={`bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded  m-2 `}\n            onClick={() => saveMutation.mutate({})}\n          >\n            Save\n          </button>\n          <button\n            disabled={true}\n            className={`bg-blue-200  text-white font-bold py-2 px-4 rounded  m-2 `}\n          >\n            Run\n          </button>\n          <button\n            className={`bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded  m-2`}\n            onClick={() => buildMutation.mutate({})}\n          >\n            Build\n          </button>\n        </div>\n      </div>\n      <Editor\n        height=\"90vh\"\n        defaultLanguage=\"javascript\"\n        defaultValue={`\n      /*\n        Export component as default\n        Export descriptor as child of component\n      */\n      \n      `}\n        value={sourceCode}\n        onChange={(value) => setSourceCode(value)}\n        {...defaultOptions}\n      />\n    </>\n  );\n};\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"./styles/output.css\";\nimport { CodeEditor } from \"./Editor\";\nimport { useState } from \"react\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n// Create a client\nconst queryClient = new QueryClient();\nconst App = () => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <div className=\"App \">\n        <CodeEditor></CodeEditor>\n      </div>\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}